}
run_crm_model = function(data,phi,MTD_threshold = 0.6){
# dat_tmp = data %>%
#   filter(enrolled == TRUE,therapy == "combo",time_now >= time_enrollment) %>%
#   group_by(dose_level) %>%
#   summarize(n = sum(time_now >= time_dlt),dlt_obs = sum(dlt),
#             n_enrolled = sum(time_now >= time_enrollment),.groups = 'drop')%>%
#   complete(dose_level, fill = list(n = 0,dlt_obs = 0,n_enrolled = 0)) %>%
#   mutate(dose = dose_level_mg[as.numeric(as.character(dose_level))],
#          in_queue = n - n_enrolled,
#          is_cleared = n >= n_cohort_mono_min,
#          is_eligible = c(TRUE,is_cleared[1:(dose_number-1)]),
#          is_full = (n >= n_cohort_MTD_mono))
#
stan_data = list(
n_dose = nrow(data),
dlts = data$dlt_obs,
exposed = data$n,
dose = data$dose,
phi = phi
)
n_chains = 1
myinits_use = vector(length = n_chains,mode = "list")
for(i in 1:n_chains){
myinits_use[[i]] =  list(alpha  = 400,
beta = 1/100
)
}
samples = sampling(
object = stan_model_use,  # Stan program
data = stan_data,    # named list of data
chains = n_chains,             # number of Markov chains
pars = c("probs","alpha","beta"),
warmup =10e3,          # number of warmup iterations per chain
iter = 20e3,
thin = 10,
init = myinits_use,
refresh=0
# control = list(adapt_delta = 0.99,max_treedepth = 20,stepsize = .1)
)
fit_probs = samples %>%
as.data.frame() %>%
dplyr::select(contains("probs")) %>%
as.matrix()
fit_alpha = samples %>%
as.data.frame() %>%
dplyr::select(contains("alpha")) %>%
as.matrix()
alpha_est = mean(fit_alpha)
dlt_rate = apply(fit_probs,2, mean)
prob_below = apply(fit_probs,2, function(x){
mean(x < phi)
})
return(data.frame(dlt_rate = dlt_rate,
prob_below = prob_below,
MTD_cont = alpha_est,
n = dat_tmp$n,
dlt = dat_tmp$dlt_obs,
is_safe = is_dose_safe(dlt_rate,prob_below,phi,MTD_threshold)
))
}
n_sims = 1e4
set.seed(03182024)
seed_list = sample.int(.Machine$integer.max, n_sims)
days_month = 365.25/12
window_dlt = 21/days_month
seed_use = 2
phi = 0.3
# epsilon = 0.4,
dose_level_mg = c(100,200,300,450,600,800)
dose_number = length(dose_level_mg)
dlt_rates_mono = c(0.05,0.1,0.15,0.2,0.25,0.4)
# dlt_rates_mono = c(.1,.1,.1,.1,.1,.1)
dlt_rates_mono = c(.35,.45,.55,.65,.75,.85)
# dlt_rates_mono = c(0.05,0.1,0.15,0.2,0.25,0.4)
# dlt_rates_combo = c(0.1,0.15,0.2,0.25,0.35,0.5)
accrual = 5 ###  subjects/month
n_max_mono = 36
n_max_combo = 36
# n_cohort_max_mono = 10
# n_cohort_max_combo = 10
n_cohort_MTD_mono = 6
n_cohort_MTD_combo = 6
# n_cohort_combo_min1 = 2
n_cohort_mono_min = c(3,2,2,2,2,2)
n_cohort_combo_min = c(3,2,2,2,2,2)
MTD_threshold = 0.6
queue_limits = c(3,4)
# sim_data = function(
#     seed_use,
#     phi = 0.3,
#     # epsilon = 0.4,
#     dose_number = 6,
#     dlt_rates_mono = c(0.05,0.1,0.15,0.2,0.25,0.4),
#     dlt_rates_combo = c(0.1,0.15,0.2,0.25,0.35,0.5),
#     accrual = 5, ###  subjects/month
#     n_max_A = 30,
#     n_max_B = 30,
#     # n_cohort_combo_max = 10,
#     n_cohort_MTD = 6,
#     n_cohort_combo_min1 = 2,
#     n_cohort_combo_min = 3
#
# ){
#
set.seed(seed_use)
cohort_max = dose_number
dose_cohort = 1:cohort_max
###### Simulate patients
subject_now = 1
time_now = 0
time_enrollment = 0
mono_not_finished = TRUE
data_sim = tibble(
subject = numeric(),
time_enrollment = numeric(),
time_dlt = numeric(),
enrolled = logical(),
therapy = character(),
dose_level = factor(levels = 1:dose_number),
dose = numeric(),
dlt = numeric()
)
while(mono_not_finished){
therapy = "mono"
# escalate = FALSE
# deescalate = FALSE
time_enrollment = time_now + rexp(1,rate = accrual) ### add screening time???
time_dlt = time_enrollment + window_dlt
time_now = time_enrollment
dat_tmp = data_sim %>%
filter(enrolled == TRUE,therapy == "mono") %>%
group_by(dose_level) %>%
summarize(n = sum(time_now >= time_dlt),
dlt_obs = sum((dlt==1) & (time_now >= time_dlt)),
n_enrolled = sum(time_now >= time_enrollment),
.groups = 'drop')%>%
complete(dose_level, fill = list(n = 0,dlt_obs = 0,n_enrolled = 0)) %>%
mutate(dose = dose_level_mg[as.numeric(as.character(dose_level))],
in_queue = n_enrolled - n,
is_cleared = n >= n_cohort_mono_min,
is_eligible = c(TRUE,is_cleared[1:(dose_number-1)]),
is_fully_enrolled = (n_enrolled >= n_cohort_MTD_mono),
is_full = (n >= n_cohort_MTD_mono)
)
crm_mod_now = run_crm_model(dat_tmp,phi=phi,MTD_threshold = MTD_threshold)
enrollment_dose = find_enrollment_dose(crm_mod_now$dlt_rate,crm_mod_now$prob_below,
phi,MTD_threshold,dat_tmp$is_eligible)
enrollment_dose_fully_enrolled = ifelse( enrollment_dose==0,TRUE, dat_tmp$is_fully_enrolled[enrollment_dose])
enrollment_dose_full = ifelse( enrollment_dose==0,TRUE, dat_tmp$is_full[enrollment_dose])
prev_level_fully_enrolled = ifelse(enrollment_dose %in% c(0,1), TRUE,
dat_tmp$is_fully_enrolled[enrollment_dose - 1])
MTD_now = find_MTD(crm_mod_now$dlt_rate,crm_mod_now$prob_below,phi,MTD_threshold)
###### Determine if they can enroll
queue_full = ifelse(enrollment_dose == 0, TRUE,
dat_tmp %>%
filter(dose_level == enrollment_dose) %>%
transmute(full = is_eligible & (in_queue >= queue_limits[is_cleared + 1])) %>%
unlist())
queue_empty = ifelse(enrollment_dose == 0, FALSE,
dat_tmp %>%
filter(dose_level == enrollment_dose) %>%
transmute(empty = is_eligible & (in_queue==0)) %>%
unlist())
backfill_level = enrollment_dose - 1
pause_enrollment = (queue_full & (enrollment_dose %in% c(0,1) | prev_level_fully_enrolled)) |
((all(!crm_mod_now$is_safe) | enrollment_dose_fully_enrolled ) & !queue_empty)
stop_study = (enrollment_dose_full | all(!crm_mod_now$is_safe)) & queue_empty
backfill_now = queue_full & (backfill_level > 0) & !prev_level_fully_enrolled
### do the can enroll thing
if(stop_study){ ### Stopping the study, turn back time to all unsafe or six completed
mono_not_finished = FALSE
} else if(pause_enrollment){ ### Don't accept the patient or maybe hold them during screening
dlt = NA
data_sim = data_sim %>% add_row(
subject = subject_now,
time_enrollment = time_enrollment,
time_dlt = time_dlt,
enrolled = FALSE,
therapy = therapy,
dose_level = factor(enrollment_dose,levels = 1:dose_number),
dose = dose_level_mg[enrollment_dose],
dlt = dlt
)
subject_now = subject_now + 1
} else if(backfill_now){ ### Backfill while waiting for queue to open
dlt = rbinom(1,1,dlt_rates_mono[backfill_level])
data_sim = data_sim %>% add_row(
subject = subject_now,
time_enrollment = time_enrollment,
time_dlt = time_dlt,
enrolled = TRUE,
therapy = therapy,
dose_level = factor(backfill_level,levels = 1:dose_number),
dose = dose_level_mg[backfill_level],
dlt = dlt
)
subject_now = subject_now + 1
} else{
###### simulate data
dlt = rbinom(1,1,dlt_rates_mono[enrollment_dose])
###### can we enroll
data_sim = data_sim %>% add_row(
subject = subject_now,
time_enrollment = time_enrollment,
time_dlt = time_dlt,
enrolled = TRUE,
therapy = therapy,
dose_level = factor(enrollment_dose,levels = 1:dose_number),
dose = dose_level_mg[enrollment_dose],
dlt = dlt
)
######
subject_now = subject_now + 1
n_enrolled = sum(data_sim$enrolled)
mono_not_finished = ifelse(n_enrolled == n_max_mono,FALSE,TRUE)
}
# data_sim %>% filter(enrolled == TRUE) %>%  print(n = 100)
# mono_not_finished
cat("\r", n_enrolled, " of ", n_max_mono)
flush.console()
}
dat_tmp
enrollment_dose
enrollment_dose_fully_enrolled
enrollment_dose_full
library(dplyr)
library(tidyr)
library(rstan)
# library(rstanarm)
# library(extraDistr)
# library(Iso)
library(parallel)
library(purrr)
rm(list = ls())
get_cores = function(df){
cores = parallel::detectCores()
if (Sys.info()['sysname']=='Windows') cores = 1
return (cores)
}
stan_model_use = stan_model("logistic_mode.stan",model_name = "crm")
is_dose_safe = function(dlt_rate,prob_below,phi,threshold){
# doses_cleared = c(TRUE,(n >= n_cutoffs))[1:length(n_cutoffs)] ### Could become more complex
below_MTD_rate = dlt_rate < phi
probability_below_MTD = (prob_below > threshold)
# idx_MTD = ifelse(length(below_MTD) > 0, max(below_MTD),0)
return(below_MTD_rate & probability_below_MTD)
}
find_enrollment_dose = function(dlt_rate,prob_below,phi,threshold,dose_eligible){
# doses_cleared = c(TRUE,(n >= n_cutoffs))[1:length(n_cutoffs)] ### Could become more complex
below_MTD_rate = dlt_rate < phi
probability_below_MTD = (prob_below > threshold)
can_enroll = which(is_dose_safe(dlt_rate,prob_below,phi,threshold) & dose_eligible)
idx_can_use = ifelse(length(can_enroll) > 0, max(can_enroll),0)
return(idx_can_use)
}
# find_enrollment_dose(c(.29,.32,.33,.34,.35,.4),c(.59,.5,.5,.5,.5,.2),c(4,3,2,0,0,0),.3,.6,c(3,2,2,2,2,2))
find_MTD = function(dlt_rate,prob_below,phi,threshold){
below_MTD_rate = dlt_rate < phi
probability_below_MTD = (prob_below > threshold)
below_MTD = which(is_dose_safe(dlt_rate,prob_below,phi,threshold))
idx_MTD = ifelse(length(below_MTD) > 0, max(below_MTD),0)
return(idx_MTD)
}
run_crm_model = function(data,phi,MTD_threshold = 0.6){
# dat_tmp = data %>%
#   filter(enrolled == TRUE,therapy == "combo",time_now >= time_enrollment) %>%
#   group_by(dose_level) %>%
#   summarize(n = sum(time_now >= time_dlt),dlt_obs = sum(dlt),
#             n_enrolled = sum(time_now >= time_enrollment),.groups = 'drop')%>%
#   complete(dose_level, fill = list(n = 0,dlt_obs = 0,n_enrolled = 0)) %>%
#   mutate(dose = dose_level_mg[as.numeric(as.character(dose_level))],
#          in_queue = n - n_enrolled,
#          is_cleared = n >= n_cohort_mono_min,
#          is_eligible = c(TRUE,is_cleared[1:(dose_number-1)]),
#          is_full = (n >= n_cohort_MTD_mono))
#
stan_data = list(
n_dose = nrow(data),
dlts = data$dlt_obs,
exposed = data$n,
dose = data$dose,
phi = phi
)
n_chains = 1
myinits_use = vector(length = n_chains,mode = "list")
for(i in 1:n_chains){
myinits_use[[i]] =  list(alpha  = 400,
beta = 1/100
)
}
samples = sampling(
object = stan_model_use,  # Stan program
data = stan_data,    # named list of data
chains = n_chains,             # number of Markov chains
pars = c("probs","alpha","beta"),
warmup =10e3,          # number of warmup iterations per chain
iter = 20e3,
thin = 10,
init = myinits_use,
refresh=0
# control = list(adapt_delta = 0.99,max_treedepth = 20,stepsize = .1)
)
fit_probs = samples %>%
as.data.frame() %>%
dplyr::select(contains("probs")) %>%
as.matrix()
fit_alpha = samples %>%
as.data.frame() %>%
dplyr::select(contains("alpha")) %>%
as.matrix()
alpha_est = mean(fit_alpha)
dlt_rate = apply(fit_probs,2, mean)
prob_below = apply(fit_probs,2, function(x){
mean(x < phi)
})
return(data.frame(dlt_rate = dlt_rate,
prob_below = prob_below,
MTD_cont = alpha_est,
n = dat_tmp$n,
dlt = dat_tmp$dlt_obs,
is_safe = is_dose_safe(dlt_rate,prob_below,phi,MTD_threshold)
))
}
n_sims = 1e4
set.seed(03182024)
seed_list = sample.int(.Machine$integer.max, n_sims)
days_month = 365.25/12
window_dlt = 21/days_month
seed_use = 2
phi = 0.3
# epsilon = 0.4,
dose_level_mg = c(100,200,300,450,600,800)
dose_number = length(dose_level_mg)
dlt_rates_mono = c(0.05,0.1,0.15,0.2,0.25,0.4)
# dlt_rates_mono = c(.1,.1,.1,.1,.1,.1)
dlt_rates_mono = c(.35,.45,.55,.65,.75,.85)
# dlt_rates_mono = c(0.05,0.1,0.15,0.2,0.25,0.4)
# dlt_rates_combo = c(0.1,0.15,0.2,0.25,0.35,0.5)
accrual = 5 ###  subjects/month
n_max_mono = 36
n_max_combo = 36
# n_cohort_max_mono = 10
# n_cohort_max_combo = 10
n_cohort_MTD_mono = 6
n_cohort_MTD_combo = 6
# n_cohort_combo_min1 = 2
n_cohort_mono_min = c(3,2,2,2,2,2)
n_cohort_combo_min = c(3,2,2,2,2,2)
MTD_threshold = 0.6
queue_limits = c(3,4)
# sim_data = function(
#     seed_use,
#     phi = 0.3,
#     # epsilon = 0.4,
#     dose_number = 6,
#     dlt_rates_mono = c(0.05,0.1,0.15,0.2,0.25,0.4),
#     dlt_rates_combo = c(0.1,0.15,0.2,0.25,0.35,0.5),
#     accrual = 5, ###  subjects/month
#     n_max_A = 30,
#     n_max_B = 30,
#     # n_cohort_combo_max = 10,
#     n_cohort_MTD = 6,
#     n_cohort_combo_min1 = 2,
#     n_cohort_combo_min = 3
#
# ){
#
set.seed(seed_use)
cohort_max = dose_number
dose_cohort = 1:cohort_max
###### Simulate patients
subject_now = 1
time_now = 0
time_enrollment = 0
mono_not_finished = TRUE
data_sim = tibble(
subject = numeric(),
time_enrollment = numeric(),
time_dlt = numeric(),
enrolled = logical(),
therapy = character(),
dose_level = factor(levels = 1:dose_number),
dose = numeric(),
dlt = numeric()
)
while(mono_not_finished){
therapy = "mono"
# escalate = FALSE
# deescalate = FALSE
time_enrollment = time_now + rexp(1,rate = accrual) ### add screening time???
time_dlt = time_enrollment + window_dlt
time_now = time_enrollment
dat_tmp = data_sim %>%
filter(enrolled == TRUE,therapy == "mono") %>%
group_by(dose_level) %>%
summarize(n = sum(time_now >= time_dlt),
dlt_obs = sum((dlt==1) & (time_now >= time_dlt)),
n_enrolled = sum(time_now >= time_enrollment),
.groups = 'drop')%>%
complete(dose_level, fill = list(n = 0,dlt_obs = 0,n_enrolled = 0)) %>%
mutate(dose = dose_level_mg[as.numeric(as.character(dose_level))],
in_queue = n_enrolled - n,
is_cleared = n >= n_cohort_mono_min,
is_eligible = c(TRUE,is_cleared[1:(dose_number-1)]),
is_fully_enrolled = (n_enrolled >= n_cohort_MTD_mono),
is_full = (n >= n_cohort_MTD_mono)
)
crm_mod_now = run_crm_model(dat_tmp,phi=phi,MTD_threshold = MTD_threshold)
enrollment_dose = find_enrollment_dose(crm_mod_now$dlt_rate,crm_mod_now$prob_below,
phi,MTD_threshold,dat_tmp$is_eligible)
enrollment_dose_fully_enrolled = ifelse( enrollment_dose==0,TRUE, dat_tmp$is_fully_enrolled[enrollment_dose])
enrollment_dose_full = ifelse( enrollment_dose==0,TRUE, dat_tmp$is_full[enrollment_dose])
prev_level_fully_enrolled = ifelse(enrollment_dose %in% c(0,1), TRUE,
dat_tmp$is_fully_enrolled[enrollment_dose - 1])
MTD_now = find_MTD(crm_mod_now$dlt_rate,crm_mod_now$prob_below,phi,MTD_threshold)
###### Determine if they can enroll
queue_full = ifelse(enrollment_dose == 0, TRUE,
dat_tmp %>%
filter(dose_level == enrollment_dose) %>%
transmute(full = is_eligible & (in_queue >= queue_limits[is_cleared + 1])) %>%
unlist())
# queue_empty = ifelse(enrollment_dose == 0, FALSE,
#                      dat_tmp %>%
#                        filter(dose_level == enrollment_dose) %>%
#                        transmute(empty = is_eligible & (in_queue==0)) %>%
#                        unlist())
queue_empty = ifelse(sum(dat_tmp$in_queue)==0,TRUE,FALSE)
backfill_level = enrollment_dose - 1
pause_enrollment = (queue_full & (enrollment_dose %in% c(0,1) | prev_level_fully_enrolled)) |
((all(!crm_mod_now$is_safe) | enrollment_dose_fully_enrolled ) & !queue_empty)
stop_study = (enrollment_dose_full | all(!crm_mod_now$is_safe)) & queue_empty
backfill_now = queue_full & (backfill_level > 0) & !prev_level_fully_enrolled
### do the can enroll thing
if(stop_study){ ### Stopping the study, turn back time to all unsafe or six completed
mono_not_finished = FALSE
} else if(pause_enrollment){ ### Don't accept the patient or maybe hold them during screening
dlt = NA
data_sim = data_sim %>% add_row(
subject = subject_now,
time_enrollment = time_enrollment,
time_dlt = time_dlt,
enrolled = FALSE,
therapy = therapy,
dose_level = factor(enrollment_dose,levels = 1:dose_number),
dose = dose_level_mg[enrollment_dose],
dlt = dlt
)
subject_now = subject_now + 1
} else if(backfill_now){ ### Backfill while waiting for queue to open
dlt = rbinom(1,1,dlt_rates_mono[backfill_level])
data_sim = data_sim %>% add_row(
subject = subject_now,
time_enrollment = time_enrollment,
time_dlt = time_dlt,
enrolled = TRUE,
therapy = therapy,
dose_level = factor(backfill_level,levels = 1:dose_number),
dose = dose_level_mg[backfill_level],
dlt = dlt
)
subject_now = subject_now + 1
} else{
###### simulate data
dlt = rbinom(1,1,dlt_rates_mono[enrollment_dose])
###### can we enroll
data_sim = data_sim %>% add_row(
subject = subject_now,
time_enrollment = time_enrollment,
time_dlt = time_dlt,
enrolled = TRUE,
therapy = therapy,
dose_level = factor(enrollment_dose,levels = 1:dose_number),
dose = dose_level_mg[enrollment_dose],
dlt = dlt
)
######
subject_now = subject_now + 1
n_enrolled = sum(data_sim$enrolled)
mono_not_finished = ifelse(n_enrolled == n_max_mono,FALSE,TRUE)
}
# data_sim %>% filter(enrolled == TRUE) %>%  print(n = 100)
# mono_not_finished
cat("\r", n_enrolled, " of ", n_max_mono)
flush.console()
}
dat_tmp
enrollment_dose
dat_tmp = data_sim %>%
filter(enrolled == TRUE) %>%
group_by(dose_level) %>%
summarize(n = n(),
dlt_obs = sum(dlt==1),
n_enrolled = n(),
.groups = 'drop')%>%
complete(dose_level, fill = list(n = 0,dlt_obs = 0,n_enrolled = 0)) %>%
mutate(dose = dose_level_mg[as.numeric(as.character(dose_level))],
in_queue = n_enrolled - n,
is_cleared = n >= n_cohort_mono_min,
is_eligible = c(TRUE,is_cleared[1:(dose_number-1)]),
is_fully_enrolled = (n_enrolled >= n_cohort_MTD_mono),
is_full = (n >= n_cohort_MTD_mono)
)
crm_mod_now = run_crm_model(dat_tmp,phi=phi,MTD_threshold = MTD_threshold)
cbind(dat_tmp,crm_mod_now)
MTD_now = find_MTD(crm_mod_now$dlt_rate,crm_mod_now$prob_below,phi,MTD_threshold)
data_sim$MTD = MTD_now
MTD_now
crm_mod_now = run_crm_model(dat_tmp,phi=phi,MTD_threshold = MTD_threshold)
cbind(dat_tmp,crm_mod_now)
setwd("~/Documents/GitHub/ERT_code_and_data")
setwd("~/Documents/GitHub/ERT_code_and_data")
